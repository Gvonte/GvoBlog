{"version":3,"sources":["components/ArticleInfo.js","components/ArticleList.js","page/ArticleIndex.js"],"names":["ArticleInfo","React","memo","props","category","author","browse","className","color","type","ArticleList","connect","state","articleList","getArticleList","setArticleList","withRouter","handleInfiniteOnLoad","id","k","page","setState","lastState","loading","then","res","data","rows","count","length","hasMore","prevProps","this","history","initialLoad","pageStart","loadMore","useWindow","dataSource","size","itemLayout","renderItem","item","Item","key","onClick","push","src","cover","alt","title","description","Category","name","Component","CheckableTag","ArticleIndex","tags","getCategory","location","exec","search","curTag","Number","useState","showTags","setShowTags","useEffect","slice","checked","onChange","map"],"mappings":"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","file":"static/js/11.5d3203a9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ArticleInfo.css'\r\nimport { Tag, Icon } from 'antd';\r\n\r\nconst ArticleInfo = React.memo(function (props) {\r\n    const { category, author, browse } = props;\r\n    return (\r\n        <div className='articleinfo-container' >\r\n            <Tag color=\"rgb(234, 241, 255)\" className=\"category\">{category}</Tag>\r\n            <Icon type=\"user\" className=\"icon\" />\r\n            <span className=\"iconfont\">{author}</span>\r\n            <Icon type=\"eye\" className=\"icon\" />\r\n            <span className=\"iconfont\">{browse}</span>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ArticleInfo","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getArticleList, setArticleList } from '../store/articleList'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './ArticleList.css'\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { List, Spin } from 'antd';\r\nimport ArticleInfo from '../components/ArticleInfo'\r\n\r\nconst ArticleList = connect(state => ({\r\n    articleList: state.articleList\r\n}), {\r\n    getArticleList, setArticleList\r\n})(withRouter(class extends Component {\r\n    /**\r\n     * 通过这次分页滚动加载组件编写，我了解到：\r\n     *   1. 多个setState更新（setState是异步更新）可能会被合并成一个，以最后一个为主\r\n     *   2. 在setState中将参数改为函数，而不是对象，能确保state是目前最新的那个state\r\n     *   3. setState是异步的，如果在请求成功后的函数中setState，那么那个时候取到的state是在上级作用域中查找，而导致state可能是旧的state，不是最新的（因为在请求返回之前，可能有其他一系列操作更新了state），所以要用函数参数形式确保是最新的state\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        // const { category: id, articleList, k } = this.props;\r\n        // console.log(\"刷新\", id, articleList, k);\r\n        this.state = {\r\n            hasMore: true,\r\n            loading: false,\r\n            page: 1\r\n        }\r\n    }\r\n    handleInfiniteOnLoad = () => {\r\n        // console.log(\"分页请求\", state);\r\n        const { category: id, k, articleList, getArticleList } = this.props;\r\n        const { page } = this.state;\r\n        this.setState(lastState => ({\r\n            ...lastState,\r\n            loading: true\r\n        }));\r\n        getArticleList(id, page, k).then(res => {\r\n            // console.log(\"请求成功\");\r\n            const { rows, count } = res.data.data;\r\n            if (count === articleList.length + rows.length) {\r\n                // 文章已经全部加载完毕\r\n                this.setState(lastState => {\r\n                    return {\r\n                        hasMore: false,\r\n                        loading: false,\r\n                        page: lastState.page + 1,\r\n                    };\r\n                })\r\n            } else {\r\n                this.setState(lastState => {\r\n                    return {\r\n                        hasMore: true,\r\n                        loading: false,\r\n                        page: lastState.page + 1\r\n                    };\r\n                })\r\n            }\r\n        });\r\n    };\r\n    // 因为props中的page，和控制分页加载数据的state都会导致组件刷新，所以需要对id单独判断，如果是id变量改变，即分类改变了，则应该将articleList等数据恢复初值\r\n    componentDidUpdate(prevProps) {\r\n        // const { category: id, articleList, k } = this.props;\r\n        // console.log(\"刷新\", id, articleList, k);\r\n        const { setArticleList } = this.props;\r\n        if (this.props.category !== prevProps.category) {\r\n            // console.log(\"id改变\");\r\n            setArticleList([]);\r\n            this.setState({\r\n                hasMore: true,\r\n                loading: false,\r\n                page: 1\r\n            }, () => {\r\n                this.handleInfiniteOnLoad();\r\n            });\r\n        } else if (this.props.k !== prevProps.k) {\r\n            // console.log(\"key改变\");\r\n            setArticleList([]);\r\n            this.setState({\r\n                hasMore: true,\r\n                loading: false,\r\n                page: 1\r\n            }, () => {\r\n                this.handleInfiniteOnLoad();\r\n            });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // console.log(\"初始化第一次请求\");\r\n        this.handleInfiniteOnLoad();\r\n    }\r\n    componentWillUnmount() {\r\n        const { setArticleList } = this.props;        \r\n        setArticleList([]);\r\n    }\r\n\r\n    render() {\r\n        const { loading, hasMore } = this.state;\r\n        const { articleList, history } = this.props;\r\n        return (\r\n            <div className=\"articlelist-container\">\r\n                {/**\r\n                 * initialLoad:true   刚进来就执行一次loadMore中的方法\r\n                 * pageStart:0        初始页为0，但是执行loadMore方法的初始值是1\r\n                 * hasMore            必须要loading状态和hasMore本身一起判断，loading的时候会改变state值导致重新刷新，如果只有hasMore就会继续分页请求，所以需要loading态一起控制\r\n                 */}\r\n                <InfiniteScroll\r\n                    initialLoad={false}\r\n                    pageStart={0}\r\n                    loadMore={this.handleInfiniteOnLoad}\r\n                    hasMore={!loading && hasMore}\r\n                    useWindow={true}\r\n                >\r\n                    <List\r\n                        dataSource={articleList}\r\n                        size=\"large\"\r\n                        itemLayout=\"vertical\"\r\n                        renderItem={item => (\r\n                            <List.Item\r\n                                key={item.id}\r\n                                className='article-list-item'\r\n                                onClick={() => { history.push(`/article/${item.id}`) }}\r\n                            >\r\n                                <img src={item.cover} alt=\"\" />\r\n                                <h1>{item.title}</h1>\r\n                                <p>{item.description}</p>\r\n                                <ArticleInfo category={item.Category.name} author={item.author} browse={item.browse} />\r\n                            </List.Item>\r\n                        )}\r\n                    >\r\n                        {/* 正在加载下一页的文章 */}\r\n                        {loading && hasMore && (\r\n                            <div className=\"demo-loading-container\">\r\n                                <Spin />\r\n                            </div>\r\n                        )}\r\n                    </List>\r\n                </InfiniteScroll>\r\n            </div >\r\n        )\r\n    }\r\n}))\r\n\r\nexport default ArticleList","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getCategory } from '../store/category'\r\nimport './ArticleIndex.css'\r\nimport { Tag } from 'antd'\r\nimport ArticleList from '../components/ArticleList'\r\n\r\nconst { CheckableTag } = Tag;\r\n\r\nconst ArticleIndex = connect(state => ({\r\n    tags: state.category\r\n}), {\r\n    getCategory\r\n})(function (props) {\r\n    const { tags, getCategory, location, history } = props;\r\n    let key = /key=(.+)/.exec(location.search);\r\n    if (key) {\r\n        // 对传入的key值处理\r\n        key = key[1];\r\n    }\r\n    let curTag = /category=(\\d+)/.exec(location.search);\r\n    curTag = curTag ? Number(curTag[1]) : 0; //当前选中的分类的id\r\n    const [showTags, setShowTags] = useState([]); //当前展示的分类有哪些\r\n    useEffect(() => {\r\n        // if (tags.length === 0) {\r\n        getCategory().then(res => {\r\n            setShowTags(res.data.data.slice(0, 8));\r\n        })\r\n        // } else {\r\n        // setShowTags(tags.slice(0, 8));\r\n        // }\r\n    }, [getCategory]);\r\n    const extend = () => {\r\n        setShowTags(tags);\r\n    }\r\n    const reduce = () => {\r\n        setShowTags(tags.slice(0, 8));\r\n    }\r\n    return (\r\n        <div className=\"articleindex-container\">\r\n            <div className=\"tag-container\">\r\n                <CheckableTag\r\n                    key={0}\r\n                    className=\"tag\"\r\n                    checked={curTag === 0}\r\n                    onChange={() => { history.push('/article') }}\r\n                >\r\n                    全部\r\n                </CheckableTag>\r\n                {showTags.map(item => {\r\n                    return (\r\n                        <CheckableTag\r\n                            key={item.id}\r\n                            className=\"tag\"\r\n                            checked={item.id === curTag}\r\n                            onChange={() => { history.push(`/article?category=${item.id}`) }}\r\n                        >\r\n                            {item.name}\r\n                        </CheckableTag>\r\n                    )\r\n                })}\r\n                {tags.length === 0 ? \"\" : tags.length !== showTags.length ? (<CheckableTag\r\n                    key={-1}\r\n                    className={[\"extend\", \"tag\"]}\r\n                    onChange={extend}\r\n                >\r\n                    展开\r\n                </CheckableTag>) : (<CheckableTag\r\n                    key={-2}\r\n                    className={[\"reduce\", \"tag\"]}\r\n                    onChange={reduce}\r\n                >\r\n                    收起\r\n                </CheckableTag>)}\r\n            </div>\r\n            <ArticleList category={curTag} k={key} />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ArticleIndex"],"sourceRoot":""}