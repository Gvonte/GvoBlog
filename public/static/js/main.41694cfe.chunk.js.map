{"version":3,"sources":["store/index.js","App.js","global.js","serviceWorker.js","index.js","store/user.js","service/login.js","service/register.js","store/category.js","service/getCategory.js","store/article.js","service/getArticle.js","store/advertise.js","service/getAdvertise.js","store/articleList.js","service/getArticleList.js"],"names":["store","createStore","combineReducers","user","advertise","category","articleList","article","applyMiddleware","thunk","Home","React","lazy","Register","Login","App","fallback","style","display","height","justifyContent","alignItems","path","component","globalInit","axios","defaults","baseURL","interceptors","request","use","config","user_info","JSON","parse","localStorage","getItem","headers","token","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","userInfo","login","payload","dispatch","post","loginFn","res","data","type","logout","register","registerFn","userReducer","state","action","setItem","stringify","removeItem","getCategory","get","categoryReducer","initial","title","author","content","browse","comment","getArticle","id","getArticleFn","Category","name","rows","articleReducer","getAdvertise","advertiseReducer","getArticleList","page","key","params","getArticleListFn","length","setArticleList","articleListReducer","concat"],"mappings":"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","file":"static/js/main.41694cfe.chunk.js","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport user from './user'\r\nimport advertise from './advertise'\r\nimport category from './category'\r\nimport articleList from './articleList'\r\nimport article from './article'\r\n\r\nconst store = createStore(\r\n    combineReducers({ user, advertise, category, articleList, article }),\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport default store;","import React, { Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Spin } from 'antd';\n\nconst Home = React.lazy(() => import('./page/Home'))\nconst Register = React.lazy(() => import('./page/Register'))\nconst Login = React.lazy(() => import('./page/Login'))\n\nfunction App() {\n  return (\n    <div>\n      <Suspense fallback={<div style={{\n        display: 'flex',\n        height: '100vh',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}><Spin /></div>}>\n        <Switch>\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// 这里写一些全局操作\r\nimport axios from 'axios'\r\n\r\nconst globalInit = () => {\r\n    axios.defaults.baseURL = 'http://localhost:3000/api';\r\n    // axios.defaults.baseURL = '/api';\r\n    axios.interceptors.request.use(config => {\r\n        // 在发送请求之前做些什么\r\n        const user_info = JSON.parse(localStorage.getItem('user_info'));\r\n        if (user_info) {\r\n            config.headers['Authorization'] = 'Bearer ' + user_info.token;\r\n        }\r\n        return config;\r\n    });\r\n};\r\n\r\nexport default globalInit","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\nimport globalInit from './global'\nimport * as serviceWorker from './serviceWorker';\n\nglobalInit();\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import loginFn from '../service/login'\r\nimport registerFn from '../service/register'\r\n\r\nconst userInfo = JSON.parse(localStorage.getItem('user_info')) || {};\r\n\r\nconst userReducer = (state = userInfo, action) => {\r\n    switch (action.type) {\r\n        case 'login':\r\n            localStorage.setItem('user_info', JSON.stringify(action.payload));\r\n            return action.payload;\r\n        case 'logout':\r\n            localStorage.removeItem('user_info');\r\n            return {};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst login = payload => dispatch => {\r\n    return loginFn(payload).then((res) => {\r\n        const data = res.data.data;\r\n        dispatch({ type: 'login', payload: data });\r\n        return res\r\n    });\r\n}\r\n\r\nconst logout = () => ({ type: 'logout' })\r\n\r\nconst register = payload => () => {\r\n    return registerFn(payload);\r\n}\r\n\r\nexport { login, logout, register }\r\nexport default userReducer","import axios from 'axios'\r\n\r\nexport default payload => {\r\n    return axios.post('/login', payload)\r\n}","import axios from 'axios'\r\n\r\nexport default payload => {\r\n    return axios.post('/register', payload)\r\n}","import getCategoryFn from '../service/getCategory'\r\n\r\nconst categoryReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'setCategory':\r\n            return action.payload || [];\r\n        case 'getCategory':\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getCategory = () => dispatch => {\r\n    return getCategoryFn().then(res => {\r\n        dispatch({ type: 'setCategory', payload: res.data.data });\r\n        return res\r\n    })\r\n}\r\n\r\nexport { getCategory }\r\nexport default categoryReducer\r\n","import axios from 'axios'\r\n\r\nexport default () => {\r\n    return axios.get('/category')\r\n}","import getArticleFn from '../service/getArticle'\r\n\r\nconst initial = {\r\n    title: '',\r\n    author: '',\r\n    content: '',\r\n    browse: '',\r\n    category: '',\r\n    comment: []\r\n};\r\n\r\nconst articleReducer = (state = initial, action) => {\r\n    switch (action.type) {\r\n        case 'setArticle':\r\n            return action.payload || initial;\r\n        case 'getArticle':\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getArticle = id => dispatch => {\r\n    return getArticleFn(id).then(res => {\r\n        const { title, author, content, browse, Category: { name: category } } = res.data.data.article;\r\n        const comment = res.data.data.comment.rows;\r\n        dispatch({ type: 'setArticle', payload: { title, author, content, browse, category, comment } });\r\n        return res\r\n    })\r\n}\r\n\r\nexport { getArticle }\r\nexport default articleReducer\r\n","import axios from 'axios'\r\n\r\nexport default id => {\r\n    return axios.get(`/article/${id}`)\r\n}","import getAdvertiseFn from '../service/getAdvertise'\r\n\r\nconst advertiseReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'setAdvertise':\r\n            return action.payload || [];\r\n        case 'getAdvertise':\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getAdvertise = () => dispatch => {\r\n    getAdvertiseFn().then(res => {\r\n        dispatch({ type: 'setAdvertise', payload: res.data.data });\r\n    })\r\n}\r\n\r\nexport { getAdvertise }\r\nexport default advertiseReducer\r\n","import axios from 'axios'\r\n\r\nexport default () => {\r\n    return axios.get('/advertise')\r\n}","import getArticleListFn from '../service/getArticleList'\r\n\r\nconst articleListReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'concatArticleList':\r\n            return state.concat(action.payload) || [];\r\n        case 'setArticleList':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getArticleList = (id, page, key) => dispatch => {\r\n    return getArticleListFn(id, page, key).then(res => {\r\n        if (res.data.data.rows.length) {\r\n            dispatch({ type: 'concatArticleList', payload: res.data.data.rows });\r\n        }\r\n        return res\r\n    })\r\n}\r\nconst setArticleList = payload => ({ type: 'setArticleList', payload })\r\n\r\nexport { getArticleList, setArticleList }\r\nexport default articleListReducer\r\n","import axios from 'axios'\r\n\r\nexport default (id, page, key) => {\r\n    if (key) {\r\n        return axios.get('/article', {\r\n            params: { page, key }\r\n        })\r\n    }\r\n\r\n    if (id === 0) {\r\n        return axios.get('/article', {\r\n            params: { page }\r\n        })\r\n    } else {\r\n        return axios.get('/article', {\r\n            params: {\r\n                category: id,\r\n                page\r\n            }\r\n        })\r\n    }\r\n}   "],"sourceRoot":""}